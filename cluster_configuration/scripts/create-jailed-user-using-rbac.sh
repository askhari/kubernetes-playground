#!/bin/bash
#
# Author: David Vidal Villamide (aka askhari)
# Description:
# Use this content to create user accounts jailed in their own namespace
#
# PREREQUISITES:
# This scripts asumes that you already have a kubernetes cluster
#+ and your kubeconfig file configured in ~/.kube/config with admin permissions.

[ $# != 1 ] && echo "Usage: $0 <username>" && exit 1

exit 0

USER_ACCOUNT=${1}

cat <<EOF | kubectl apply -f -
---
apiVersion: v1
kind: Namespace
metadata:
  name: ${USER_ACCOUNT}
spec:
  finalizers:

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${USER_ACCOUNT}
  namespace: ${USER_ACCOUNT}


# If you want to restrict more the permissions you may want to create a Role also.
#---
#kind: Role
#apiVersion: rbac.authorization.k8s.io/v1beta1
#metadata:
#  name: ${USER_ACCOUNT}-user-full-access
#  namespace: ${USER_ACCOUNT}
#rules:
#- apiGroups: ["", "extensions", "apps"]
#  resources: ["*"]
#  verbs: ["*"]
#- apiGroups: ["batch"]
#  resources:
#  - jobs
#  - cronjobs
#  verbs: ["*"]

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: ${USER_ACCOUNT}-user-view
  namespace: ${USER_ACCOUNT}
subjects:
- kind: ServiceAccount
  name: ${USER_ACCOUNT}
  namespace: ${USER_ACCOUNT}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
EOF

sleep 1

# Now lets retrieve credentials

# This retrieves the token and certificate generated by the service account.
USER_TOKEN_NAME=$(kubectl get secrets --namespace ${USER_ACCOUNT} | grep ${USER_ACCOUNT} | awk '{ print $1 }')
USER_TOKEN=$(kubectl get secret --namespace ${USER_ACCOUNT} ${USER_TOKEN_NAME} -o "jsonpath={.data.token}" | base64 -d)
echo "Token: ${USER_TOKEN}"

USER_CERT=$(kubectl get secret --namespace ${USER_ACCOUNT} ${USER_TOKEN_NAME} -o "jsonpath={.data['ca\.crt']}")
echo "Certificate: ${USER_CERT}"

# Get current cluster URL
CURRENT_CLUSTER_CONTEXT=$(kubectl config current-context)
CURRENT_CLUSTER_URL=$(kubectl config view -o jsonpath="{.clusters[?(@.name == \"$CURRENT_CLUSTER\")].cluster.server}")
# After this you should create the kubeconfig file. You may use the kubectl command or the template below
cat <<EOF >${USER_ACCOUNT}-config
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: ${USER_CERT}
    server: ${CURRENT_CLUSTER_URL}
  name: playground
contexts:
- context:
    cluster: playground
    namespace: dvidal
    user: rafles
  name: playground
current-context: playground
kind: Config
preferences: {}
users:
- name: rafles
  user:
    client-key-data: ${USER_CERT}
    token: ${USER_TOKEN}
EOF
